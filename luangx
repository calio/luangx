#!/usr/bin/env perl

use Getopt::Std;
use Cwd qw /getcwd/;
use File::Temp qw/ tempdir /;
use File::Copy;

use strict;
use warnings;

my $PORT = int(rand(10000) + 10000);
my %opts;
my $work_dir = getcwd();
my $error_level = "notice";


sub usage_and_die()
{
    usage();
    exit 1;
}

sub usage()
{
    print <<EOL;
usage: luangx run luafile
              bench [-c concurrency] [-n requests] [-k] luafile
              make-env dir
              <command> [args] [luafile]

the most commonly used commands are:
    run         run a lua scriipt using ngx_lua
    make-env    make a nginx working environment, generate start/stop scripts
    bench       do benchmark on a single lua script
EOL
}

sub make_dirs($) {
    my $root = shift;
    mkdir "$root/logs";
    mkdir "$root/conf";
}

sub make_conf($) {
    my $root = shift;

    my $conf = <<END;

worker_processes  2;

error_log  logs/error.log $error_level;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

env HOME;
env PATH;

http {
    #include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log  combined;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path '$work_dir/lib/?.lua;$root/lib/?.lua;/usr/local/openresty/lualib/?.lua;;';
    lua_package_cpath ';;';

    server {
        listen       $PORT backlog=512;
        server_name  localhost;


        location /hello {
            echo "hello";
        }

        location /lua {
            content_by_lua_file "$root/main.lua";
        }
    }
}

END

    open FILE, ">", "$root/conf/nginx.conf"
            or die "Can't open $root/conf/nginx.conf: $!";
    print FILE $conf;
    close FILE;
}

sub make_start_script($)
{
    my $root = shift;
    open FILE, ">", "$root/start-nginx.sh"
            or die "Can't open $root/start-nginx.sh: $!";

    print FILE <<'EOF';
nginx -c `pwd`\/conf\/nginx.conf -p `pwd`/
EOF
    close FILE;

    open FILE, ">", "$root/stop-nginx.sh"
            or die "Can't open $root/stop-nginx.sh: $!";
    print FILE <<'EOF';
kill `cat logs/nginx.pid `
EOF
    close FILE;

    chmod 0755, "$root/start-nginx.sh", "$root/stop-nginx.sh"
            or die "chmod failed: $!";
}

sub make_env($)
{
    my $base = shift;
    make_dirs($base);
    make_conf($base);
    make_start_script($base);
}

sub check_cmd($)
{
    my $cmd = shift;

    if ($cmd ne "run" && $cmd ne "make-env" && $cmd ne "bench") {
        print "Unknown command: $cmd\n";
        usage_and_die();
    }
}

sub prepare_lua_file($$)
{
    my ($luafile, $workdir) = @_;
    copy($luafile, "$workdir/main.lua");
}

sub start_nginx($)
{
    my $workdir = shift;
    chdir $workdir;

    `./start-nginx.sh`;
    my $pid = `cat logs/nginx.pid`;
    chomp $pid;

    #print("pid: $pid\n");
    return $pid;
}

sub curl($) {
    my $tmpdir = shift;

    my $res = `curl "localhost:$PORT/lua?a=1" 2>/dev/null`;

    print $res;

    open ERROR_LOG, "$tmpdir/logs/error.log"
            or die "Can't open $tmpdir/logs/error.log: $!";
    while (<ERROR_LOG>) {
        print;
    }
    close ERROR_LOG;
}

sub benchmark($) {
    my $tmpdir = shift;
    my $concurrency = $opts{c};
    my $num = $opts{n};

    if (!$concurrency or !$num) {
        usage_and_die();
    }

    my $keepalive = "";
    if ($opts{k}) {
        $keepalive = "-k";
    }

    my $cmd = "ab -c $concurrency -n $num $keepalive "
            . "\"http://127.0.0.1:$PORT/lua?a=1\""
            . "2>&1";
    #print("cmd: $cmd\n");
    my $res = `$cmd`;

    print $res;

    #open ERROR_LOG, "$tmpdir/logs/error.log"
    #       or die "Can't open $tmpdir/logs/error.log: $!";
    #while (<ERROR_LOG>) {
    #    print;
    #}
    #close ERROR_LOG;
}

sub run_file($$) {
    my ($luafile, $run) = @_;

    my $tmpdir = tempdir( "/tmp/luangx.XXXXXXXX");

    make_env($tmpdir);

    prepare_lua_file($luafile, $tmpdir);

    my $pid = start_nginx($tmpdir);

    &$run($tmpdir);

    kill "TERM", $pid;
    `rm -r $tmpdir`;
}

my $cmd;
my $argc = @ARGV;

if ($argc == 0) {
    usage_and_die();
} elsif ($argc == 1) {
    $cmd = "run";
} else {
    $cmd = shift;
    check_cmd($cmd);
}

if (!getopts('hc:n:k', \%opts)) {
    usage_and_die();
}

my $luafile = shift;

if (!$luafile) {
    warn 'Missing lua file';
    usage_and_die();
}

if ($cmd eq "make-env") {
    make_env(".");
} elsif ($cmd eq "run") {
    run_file($luafile, \&curl);
} elsif ($cmd eq "bench") {
    $error_level = "error";
    run_file($luafile, \&benchmark);
}
