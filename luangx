#!/bin/bash

INPUTFILE=$1
LUA_ARGS=$2

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    TMPNAME=`mktemp -d`
elif [[ "$OSTYPE" == "darwin"* ]]; then
    TMPNAME=`mktemp -d /tmp/luangx.XXXXXXXX`
else
    echo "Not supported OS"
    exit 0
fi

LOGDIR=$TMPNAME/logs
CONFDIR=$TMPNAME/conf
CONFFILE=$CONFDIR/nginx.conf
LUAFILE=$TMPNAME/main.lua
PIDFILE=$LOGDIR/nginx.pid

PORT=$((($RANDOM + 20000)))


[[ $INPUTFILE == "-" ]] && INPUTFILE=

mkdir -p $TMPNAME
mkdir -p $LOGDIR
mkdir -p $CONFDIR

while read line
do
  echo "$line"
done > $LUAFILE < "${INPUTFILE:-/proc/${$}/fd/0}" || exit

cat > $CONFFILE << EOF
worker_processes  1;

error_log  logs/error.log notice;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    #include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log  combined;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path '/usr/local/openresty/lualib/?.lua;;';
    lua_package_cpath ';;';

    server {
        listen       $PORT;
        server_name  localhost;


        location /hello {
            echo "hello";
        }

        location /lua {
            content_by_lua_file "$LUAFILE";
        }
    }
}
EOF


#echo "TEMPDIR:"$TMPNAME

nginx -c $CONFFILE -p $TMPNAME/
PID=`cat $PIDFILE`

#echo "Nginx($PID) started successfully."

#echo "Execute lua script."

on_die()
{
    echo "on die, kill nginx:$PID, remove $PIDFILE"
    kill $PID
    rm $PIDFILE
}

trap 'on_die' SIGTERM SIGINT

RES=`curl "localhost:$PORT/lua?$LUA_ARGS"`

echo $RES
cat $LOGDIR/error.log >&2

#echo

#echo "Kill nginx($PID)."
kill $PID

#rm -r $TMPNAME
