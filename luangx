#!/usr/bin/env perl

use Getopt::Long;
use Cwd qw /getcwd/;
use File::Temp qw/ tempdir /;
use File::Copy;
use Template;

use strict;
use warnings;

my $PORT = int(rand(10000) + 10000);
my $work_dir = getcwd();
my $error_level = "notice";
my $NGINX = "nginx";

my $help = '';
my $concurrency = 10,
my $requests    = 1000,
my $keepalive = '';
my %phases = (
    "rewrite" => '',
    "access" => '',
    "content" => 'content.lua',
    "header_filter" => '',
    "body_filter" => '',
    "log" => ''
);
my $phase_handlers_text;
my @phase_handlers;
my $conf_template;

sub usage_and_die()
{
    usage();
    exit 1;
}

sub usage()
{
    print <<EOL;
usage: luangx run [--template conf_tempate] [--access luafile]
                  [--rewrite luafile] [--header_flter luafile]
                  [--body_filter luafile] [--log luafile] [--content] luafile
              bench [-c concurrency] [-n requests] [-k] luafile
              make-env dir
              <command> [args] [luafile]

the most commonly used commands are:
    run         run a lua scriipt using ngx_lua
    make-env    make a nginx working environment, generate start/stop scripts
    bench       do benchmark on a single lua script
EOL
}

sub make_dirs($) {
    my $root = shift;
    mkdir "$root/logs";
    mkdir "$root/conf";
}

sub make_conf($$) {
    my $root = shift;
    my $handler_text = shift;
    my $conf;
    my $vars = {
        root => $root,
        port => $PORT,
        work_dir => $work_dir,
        error_level => $error_level,
        handler_text => $handler_text,
    };

    my $tt = Template->new() or die "Can't init Template.";
    if ($conf_template) {
        $tt->process($conf_template, $vars, \$conf) or die $tt->error();
    } else {
        $tt->process(\*DATA, $vars, \$conf) or die $tt->error();
    }

    open FILE, ">", "$root/conf/nginx.conf"
            or die "Can't open $root/conf/nginx.conf: $!";
    print FILE $conf;
    close FILE;
}

sub make_start_script($)
{
    my $root = shift;
    open FILE, ">", "$root/start-nginx.sh"
            or die "Can't open $root/start-nginx.sh: $!";

    print FILE <<EOF;
$NGINX -c `pwd`\/conf\/nginx.conf -p `pwd`/
EOF
    close FILE;

    open FILE, ">", "$root/stop-nginx.sh"
            or die "Can't open $root/stop-nginx.sh: $!";
    print FILE <<'EOF';
kill `cat logs/nginx.pid `
EOF
    close FILE;

    chmod 0755, "$root/start-nginx.sh", "$root/stop-nginx.sh"
            or die "chmod failed: $!";
}

sub make_env($$)
{
    my $base = shift;
    my $handler_text = shift;
    make_dirs($base);
    make_conf($base, $handler_text);
    make_start_script($base);
}

sub check_cmd()
{
    my $cmd = shift @ARGV;

    if ($cmd =~ /.+\.lua/) {
        unshift @ARGV, $cmd;
        return "run";
    }

    if ($cmd =~ /^\-/) {
        unshift @ARGV, $cmd;
        #no command found
        return "";
    }

    if ($cmd ne "run" && $cmd ne "make-env" && $cmd ne "bench") {
        print "Unknown command: $cmd\n";
        usage_and_die();
    }

    return $cmd;
}

sub prepare_lua_file($$$)
{
    my ($luafile, $workdir, $name) = @_;
    copy($luafile, "$workdir/$name");
}

sub start_nginx($)
{
    my $workdir = shift;
    chdir $workdir;

    `./start-nginx.sh`;
    my $pid = `cat logs/nginx.pid`;
    chomp $pid;

    #print("pid: $pid\n");
    return $pid;
}

sub curl($) {
    my $tmpdir = shift;

    my $res = `curl "localhost:$PORT/lua?a=1" 2>/dev/null`;

    print $res;

    open ERROR_LOG, "$tmpdir/logs/error.log"
            or die "Can't open $tmpdir/logs/error.log: $!";
    while (<ERROR_LOG>) {
        print;
    }
    close ERROR_LOG;
}

sub benchmark($) {
    my $tmpdir = shift;
    my $num = $requests;

    if (!$concurrency or !$num) {
        usage_and_die();
    }

    my $keepalive_arg = "";
    if ($keepalive) {
        $keepalive_arg = "-k";
    }

    my $cmd = "ab -c $concurrency -n $num $keepalive_arg "
            . "\"http://127.0.0.1:$PORT/lua?a=1\""
            . "2>&1";
    #print("cmd: $cmd\n");
    my $res = `$cmd`;

    print $res;

    #open ERROR_LOG, "$tmpdir/logs/error.log"
    #       or die "Can't open $tmpdir/logs/error.log: $!";
    #while (<ERROR_LOG>) {
    #    print;
    #}
    #close ERROR_LOG;
}

sub run_file($$) {
    my ($luafile, $run) = @_;

    my $tmpdir = tempdir( "/tmp/luangx.XXXXXXXX");

    $phases{"content"} = $luafile if $luafile;

    for my $phase (keys %phases) {
        if ($phases{$phase}) {
            prepare_lua_file($phases{$phase}, $tmpdir, "$phase.lua");
            push @phase_handlers, "${phase}_by_lua_file \"$tmpdir/$phase.lua\";";
        }
    }
    my $handler_text = join "\n", @phase_handlers;

    make_env($tmpdir, $handler_text);
    my $pid = start_nginx($tmpdir);

    &$run($tmpdir);

    kill "TERM", $pid;
    `rm -r $tmpdir`;
}

my $cmd;
my $argc = @ARGV;

if ($argc == 0) {
    usage_and_die();
} else {
    $cmd = check_cmd();
}

GetOptions('help' => \$help,
           'concurrency=i' => \$concurrency,
           'num=i' => \$requests,
           'rewrite=s' => \$phases{"rewrite"},
           'access=s' => \$phases{"access"},
           'content=s' => \$phases{"content"},
           'header_filter=s' => \$phases{"header_filter"},
           'body_filter=s' => \$phases{"body_filter"},
           'log=s' => \$phases{"log"},
           'keepalive' => \$keepalive,
           'template=s' => \$conf_template,
) or usage_and_die();

if ($ENV{NGINX}) {
    $NGINX=$ENV{NGINX}
}

if ($cmd eq "make-env") {
    make_env(".", "content_by_lua_file \"content.lua\";\n");
} elsif ($cmd eq "run") {
    my $luafile = shift;

    if (!$luafile && !$phases{"content"}) {
        warn 'Missing lua file';
        usage_and_die();
    }

    run_file($luafile, \&curl);
} elsif ($cmd eq "bench") {
    my $luafile = shift;

    if (!$luafile) {
        warn 'Missing lua file';
        usage_and_die();
    }
    $error_level = "error";
    run_file($luafile, \&benchmark);
} else {
    usage_and_die();
}


__END__
master_process off;
worker_processes  1;

error_log  logs/error.log [% error_level %];
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

env HOME;
env PATH;

http {
    #include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log  combined;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path '[% work_dir %]/lib/?.lua;[% root %]/lib/?.lua;/usr/local/openresty/lualib/?.lua;;';
    lua_package_cpath ';;';

    server {
        listen       [% port %] backlog=512;
        server_name  localhost;


        location /hello {
            echo "hello";
        }

        location /lua {
            [% handler_text %]
            #content_by_lua_file "[% root %]/content.lua";
        }
    }
}

